---
- hosts: all

  vars_files:
    - default.config.yml
    - vars_private.yml
  vars:
    source_key: "./files/ssh/id_rsa"
    dest_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
    personal: "{{ lookup('env', 'HOME') }}/personal"
    work: "{{ lookup('env', 'HOME') }}/work"
    github: "{{ lookup('env', 'HOME') }}/github"


  pre_tasks:
    - name: Include playbook configuration.
      include_vars: "{{ item }}"
      with_fileglob:
        - "{{ playbook_dir }}/config.yml"
      tags: ['always']
    
    - name: Check if running in VM (Parallels/VMware)
      shell: |
        # Method 1: Check for Parallels Desktop app
        if [ -d "/Applications/Parallels Desktop.app" ]; then
          # We have Parallels installed, but are we IN a VM?
          if ioreg -l 2>/dev/null | grep -q '"IOPlatformSerialNumber" = "Parallels-'; then
            echo "true"
          elif ls /dev/disk* 2>/dev/null | grep -q "disk0s1"; then
            # Check if disk labels indicate virtual disk
            if diskutil info disk0 2>/dev/null | grep -qi "parallels\|virtual"; then
              echo "true"
            else
              echo "false"
            fi
          else
            echo "false"
          fi
        # Method 2: Direct check for Parallels VM indicators
        elif ls /System/Library/Extensions 2>/dev/null | grep -qi "prl_"; then
          echo "true"
        # Method 3: Check for Parallels tools
        elif [ -d "/Library/Parallels Guest Tools" ]; then
          echo "true"
        # Method 4: Check hardware model for VM signatures
        elif ioreg -l 2>/dev/null | grep -q "Parallels Virtual Platform"; then
          echo "true"
        # Method 5: Check for VMware
        elif [ -f "/Library/Preferences/VMware Fusion/config" ]; then
          echo "true"
        # Method 6: Check system firmware vendor
        elif ioreg -l 2>/dev/null | grep '"manufacturer" = ' | grep -qi "parallels\|vmware\|innotek"; then
          echo "true"
        else
          echo "false"
        fi
      register: parallels_vm_check
      changed_when: false
      ignore_errors: true
      tags: ['always']
    
    - name: Debug VM detection output
      debug:
        var: parallels_vm_check.stdout
        verbosity: 1
      tags: ['always']
    
    - name: Check if Mac App Store is accessible (secondary VM check)
      shell: |
        if command -v mas >/dev/null 2>&1; then
          # Try to check MAS account status
          if mas account 2>&1 | grep -q "Not signed in"; then
            echo "mas_available"
          elif mas account 2>&1 | grep -q "is not signed in"; then
            echo "mas_available"
          elif mas account 2>&1 | grep -E "^\w+@"; then
            echo "mas_available"
          else
            echo "mas_unavailable"
          fi
        else
          echo "mas_not_installed"
        fi
      register: mas_check
      changed_when: false
      ignore_errors: true
      tags: ['always']
    
    - name: Set VM fact based on multiple checks
      set_fact:
        running_in_vm: "{{ (parallels_vm_check.stdout == 'true') or (mas_check.stdout == 'mas_unavailable') }}"
      tags: ['always']
    
    - name: Display VM detection result
      debug:
        msg: |
          Running in VM: {{ running_in_vm }}
          VM detection: {{ parallels_vm_check.stdout }}
          MAS availability: {{ mas_check.stdout }}
      tags: ['always']

  roles:
    - role: elliotweiser.osx-command-line-tools
    - role: geerlingguy.mac.homebrew
      tags: ['homebrew']
      when: configure_dotfiles
    - role: geerlingguy.mac.mas
      when: (mas_installed_apps or mas_installed_app_ids) and not running_in_vm
      tags: ['mas']
    - role: geerlingguy.mac.dock
      when: configure_dock
      tags: ['dock']

  tasks:
    - import_tasks: tasks/vm-apps.yml
      tags: ['vm-apps']
    - import_tasks: tasks/ssh.yml
      tags: ['ssh']
    - import_tasks: tasks/sudoers.yml
      when: configure_sudoers
      tags: ['sudoers']
    - import_tasks: tasks/fonts.yml
      tags: ['fonts']
    - import_tasks: tasks/zsh.yml
      tags: ['zsh']
    - import_tasks: tasks/asdf.yml
      tags: ['asdf']
    - import_tasks: tasks/spacemacs.yml
      tags: ['spacemacs']
    - import_tasks: tasks/tmux.yml
      tags: ['tmux']
    - import_tasks: tasks/dotfiles.yml
      tags: ['dotfiles']
    - import_tasks: tasks/osx.yml
      when: configure_osx
      tags: ['osx']

    - import_tasks: tasks/extra-packages.yml
      tags: ['extra-packages']

    - name: Run configured post-provision ansible task files.
      include_tasks: "{{ outer_item }}"
      loop_control:
        loop_var: outer_item
      with_fileglob: "{{ post_provision_tasks|default(omit) }}"
      tags: ['post']
